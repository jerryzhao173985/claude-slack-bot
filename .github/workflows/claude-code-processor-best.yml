name: Claude Code Processor Best

on:
  workflow_dispatch:
    inputs:
      question:
        description: "User question from Slack"
        required: true
        type: string
      mcp_tools:
        description: "Comma-separated list of MCP tools to enable"
        required: false
        type: string
        default: ""
      slack_channel:
        description: "Slack channel ID"
        required: true
        type: string
      slack_ts:
        description: "Slack message timestamp (placeholder)"
        required: true
        type: string
      slack_thread_ts:
        description: "Slack thread timestamp"
        required: false
        type: string
      system_prompt:
        description: "System prompt with thread context"
        required: false
        type: string

jobs:
  run-claude:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Prepare MCP config
        run: |
          # Start with base MCP servers
          cat > mcp-config.json << 'EOF'
          {
            "mcpServers": {
          EOF
          
          # Add requested MCP servers
          FIRST=true
          IFS=',' read -ra TOOLS <<< "${{ github.event.inputs.mcp_tools }}"
          for tool in "${TOOLS[@]}"; do
            tool=$(echo "$tool" | tr -d ' ')
            
            if [ -n "$tool" ]; then
              if [ "$FIRST" = false ]; then
                echo "," >> mcp-config.json
              fi
              FIRST=false
              
              case "$tool" in
                "slack")
                  cat >> mcp-config.json << 'EOF'
              "slack": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-slack"],
                "env": {
                  "SLACK_BOT_TOKEN": "${{ secrets.SLACK_BOT_TOKEN }}",
                  "SLACK_TEAM_ID": "${{ secrets.SLACK_TEAM_ID }}"
                }
              }
          EOF
                  ;;
                "notion"|"notionApi")
                  cat >> mcp-config.json << 'EOF'
              "notionApi": {
                "command": "npx",
                "args": ["-y", "@notionhq/notion-mcp-server"],
                "env": {
                  "OPENAPI_MCP_HEADERS": "{\"Authorization\":\"Bearer ${{ secrets.NOTION_KEY }}\",\"Notion-Version\":\"2022-06-28\"}"
                }
              }
          EOF
                  ;;
                "github")
                  cat >> mcp-config.json << 'EOF'
              "github": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-github"],
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GH_TOKEN }}"
                }
              }
          EOF
                  ;;
              esac
            fi
          done
          
          cat >> mcp-config.json << 'EOF'
            }
          }
          EOF
      
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            You are a helpful Slack bot assistant. A user has asked you a question.
            
            Question: ${{ github.event.inputs.question }}
            
            ${{ github.event.inputs.system_prompt }}
            
            Please provide a helpful response. After you complete your analysis and have your answer ready:
            1. Save your complete response to a file called 'slack_response.txt' using the Write tool
            2. The response should be well-formatted for Slack (you can use Slack markdown)
            3. Keep your response concise and directly address the user's question
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          anthropic_model: claude-3-7-sonnet-20250219
          mcp_config_path: "./mcp-config.json"
          allowed_tools: "ALL"
          max_turns: 15
          claude_env: |
            ANTHROPIC_PROMPT_CACHING=1
      
      - name: Update Slack message with response
        if: always()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          if [ -f "slack_response.txt" ]; then
            # Read and properly escape the response
            RESPONSE=$(cat slack_response.txt | jq -Rs .)
            
            # Update the placeholder message
            curl -X POST https://slack.com/api/chat.update \
              -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{
                \"channel\": \"${{ github.event.inputs.slack_channel }}\",
                \"ts\": \"${{ github.event.inputs.slack_ts }}\",
                \"text\": $RESPONSE
              }"
          else
            # If no response file, try to post as a reply
            DEFAULT_MSG="I've completed the analysis. Please check the action logs for details."
            
            # First try to update the placeholder
            UPDATE_RESPONSE=$(curl -s -X POST https://slack.com/api/chat.update \
              -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
              -H "Content-Type: application/json" \
              -d '{
                "channel": "${{ github.event.inputs.slack_channel }}",
                "ts": "${{ github.event.inputs.slack_ts }}",
                "text": "'"$DEFAULT_MSG"'"
              }')
            
            # If update fails, post as reply
            if ! echo "$UPDATE_RESPONSE" | jq -e '.ok' > /dev/null 2>&1; then
              curl -X POST https://slack.com/api/chat.postMessage \
                -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
                -H "Content-Type: application/json" \
                -d '{
                  "channel": "${{ github.event.inputs.slack_channel }}",
                  "thread_ts": "${{ github.event.inputs.slack_thread_ts || github.event.inputs.slack_ts }}",
                  "text": "'"$DEFAULT_MSG"'"
                }'
            fi
          fi