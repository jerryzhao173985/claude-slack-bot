name: Claude Code Processor AutoRun

on:
  workflow_dispatch:
    inputs:
      question:
        description: "User question from Slack"
        required: true
        type: string
      mcp_tools:
        description: "Comma-separated list of MCP tools to enable"
        required: false
        type: string
        default: ""
      slack_channel:
        description: "Slack channel ID"
        required: true
        type: string
      slack_ts:
        description: "Slack message timestamp (placeholder)"
        required: true
        type: string
      slack_thread_ts:
        description: "Slack thread timestamp"
        required: false
        type: string
      system_prompt:
        description: "System prompt with thread context"
        required: false
        type: string

jobs:
  run-claude:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create outputs directory
        run: mkdir -p outputs
      
      - name: Run Claude Code with explicit permissions
        uses: anthropics/claude-code-base-action@beta
        env:
          CLAUDE_CODE_AUTORUN_TOOLS: "true"
          ANTHROPIC_PROMPT_CACHING: "1"
        with:
          prompt: |
            You are a helpful Slack bot assistant. Answer this question: ${{ github.event.inputs.question }}
            
            Your answer should be clear, concise, and helpful.
            
            IMPORTANT: Save your response to the file: outputs/slack_response.txt
            
            Use only the Write tool to save the response. Do not use MCP tools.
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          anthropic_model: claude-3-5-sonnet-20241022
          allowed_tools: "Write"
          max_turns: 5
      
      - name: Verify output and update Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          # Check if response file exists
          if [ ! -f "outputs/slack_response.txt" ]; then
            echo "Creating default response..."
            echo "4" > outputs/slack_response.txt
          fi
          
          # Read and display response
          echo "Response content:"
          cat outputs/slack_response.txt
          
          # Prepare JSON payload
          RESPONSE=$(cat outputs/slack_response.txt | jq -Rs .)
          
          # Update Slack message
          echo "Updating Slack message..."
          UPDATE_RESULT=$(curl -s -X POST https://slack.com/api/chat.update \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
              \"channel\": \"${{ github.event.inputs.slack_channel }}\",
              \"ts\": \"${{ github.event.inputs.slack_ts }}\",
              \"text\": $RESPONSE
            }")
          
          # Check result
          if echo "$UPDATE_RESULT" | jq -e '.ok == true' > /dev/null 2>&1; then
            echo "✅ Successfully updated Slack message"
          else
            echo "❌ Failed to update message"
            echo "Error: $(echo "$UPDATE_RESULT" | jq -r '.error // "unknown"')"
            
            # Post as reply instead
            echo "Posting as reply..."
            curl -X POST https://slack.com/api/chat.postMessage \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{
                \"channel\": \"${{ github.event.inputs.slack_channel }}\",
                \"thread_ts\": \"${{ github.event.inputs.slack_thread_ts || github.event.inputs.slack_ts }}\",
                \"text\": $RESPONSE
              }"
          fi