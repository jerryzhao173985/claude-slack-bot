name: Claude Code Processor

on:
  workflow_dispatch:
    inputs:
      question:
        description: "User question from Slack"
        required: true
        type: string
      slack_channel:
        description: "Slack channel ID"
        required: true
        type: string
      slack_ts:
        description: "Slack message timestamp"
        required: true
        type: string
      slack_thread_ts:
        description: "Slack thread timestamp"
        required: false
        type: string
      system_prompt:
        description: "Additional context (e.g., thread history)"
        required: false
        type: string
      model:
        description: "Claude model to use"
        required: false
        type: string
        default: "claude-sonnet-4-20250514"
      mcp_tools:
        description: "Comma-separated list of MCP tools"
        required: false
        type: string
      repository_context:
        description: "JSON string with repository context information"
        required: false
        type: string
      max_turns:
        description: "Maximum conversation turns (dynamically calculated)"
        required: false
        type: string
        default: "15"
      timeout_minutes:
        description: "Workflow timeout in minutes (dynamically calculated)"
        required: false
        type: string
        default: "10"
      session_id:
        description: "Session ID to resume a previous conversation"
        required: false
        type: string
      enable_checkpointing:
        description: "Enable progress checkpointing for long tasks"
        required: false
        type: string
        default: "false"

jobs:
  process-request:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout_minutes || '10') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup environment
        run: |
          mkdir -p outputs
          mkdir -p outputs/checkpoints
          mkdir -p ~/.local/bin
      
      - name: Install GitHub MCP Server
        run: |
          echo "Downloading github-mcp-server binary..."
          curl -L https://github.com/github/github-mcp-server/releases/download/v0.5.0/github-mcp-server_Linux_x86_64.tar.gz | tar xz -C ~/.local/bin
          chmod +x ~/.local/bin/github-mcp-server
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      
      - name: Configure Claude settings
        id: claude-config
        run: |
          # Model-specific settings
          if [[ "${{ github.event.inputs.model }}" == "claude-3-5-sonnet-20241022" ]]; then
            THINKING="false"
          else
            THINKING="true"
          fi
          
          # Output environment variables
          cat > claude_env.txt << EOF
          ANTHROPIC_PROMPT_CACHING=1
          CLAUDE_CODE_AUTORUN_TOOLS=true
          CLAUDE_CODE_THINKING=$THINKING
          CLAUDE_CODE_DANGEROUSLY_SKIP_PERMISSIONS=true
          EOF
          
          # Set output for GitHub Actions
          echo "claude_env<<EOF" >> $GITHUB_OUTPUT
          cat claude_env.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Process with Claude
        uses: anthropics/claude-code-base-action@beta
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          prompt: |
            You are Claude, a helpful Slack bot assistant.
            
            **User Question:** ${{ github.event.inputs.question }}
            **Channel:** ${{ github.event.inputs.slack_channel }}
            **Thread:** ${{ github.event.inputs.slack_thread_ts || github.event.inputs.slack_ts }}
            **Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            ## Instructions
            
            ### 1. Save to Notion (if available)
            - Search for "Claude Code" page using `mcp__notionApi__API-post-search`
            - If found, create a sub-page using `mcp__notionApi__API-post-page` with ALL content in the `children` array:
              ```json
              {
                "parent": { "page_id": "<CLAUDE_CODE_PAGE_ID>" },
                "properties": {
                  "title": { "title": [{ "text": { "content": "<Clean title, max 50 chars>" } }] }
                },
                "children": [
                  { "heading_1": { "rich_text": [{ "text": { "content": "<Title>" } }] } },
                  { "heading_2": { "rich_text": [{ "text": { "content": "Question" } }] } },
                  { "paragraph": { "rich_text": [{ "text": { "content": "${{ github.event.inputs.question }}" } }] } },
                  { "heading_2": { "rich_text": [{ "text": { "content": "Answer" } }] } },
                  { "paragraph": { "rich_text": [{ "text": { "content": "<Your complete response>" } }] } },
                  { "heading_2": { "rich_text": [{ "text": { "content": "Metadata" } }] } },
                  { "bulleted_list_item": { "rich_text": [{ "text": { "content": "Timestamp: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")" } }] } },
                  { "bulleted_list_item": { "rich_text": [{ "text": { "content": "Channel: ${{ github.event.inputs.slack_channel }}" } }] } },
                  { "bulleted_list_item": { "rich_text": [{ "text": { "content": "Model: ${{ github.event.inputs.model }}" } }] } }
                ]
              }
              ```
            - IMPORTANT: Include ALL content blocks in the `children` array when creating the page
            
            ### 2. Reply to Slack
            - Use `mcp__slack__slack_reply_to_thread`:
              - channel_id: "${{ github.event.inputs.slack_channel }}"
              - thread_ts: "${{ github.event.inputs.slack_thread_ts || github.event.inputs.slack_ts }}"
              - text: Your response
            
            ### 3. GitHub Repository Analysis
            - If user mentions a repository (e.g., owner/repo or github.com/owner/repo), use GitHub MCP tools
            - Check the system prompt for repository context - it will tell you if you have read-only or full access
            - Natural language commands to handle:
              - "create a PR" → Use `mcp__github__create_pull_request`
              - "fix the typo" → Use `mcp__github__create_or_update_file` then create PR
              - "open an issue" → Use `mcp__github__create_issue`
              - "review PR" → Use review tools
              - "what changed" → Use `mcp__github__list_commits`
              - "analyze code" → Use `mcp__github__search_code` and `mcp__github__get_file_contents`
            - For owned repositories, you can perform write operations
            - For other repositories, provide analysis and suggestions only
            - Repository context is provided in: ${{ github.event.inputs.repository_context }}
            
            ### 4. Thread Context
            - If user mentions "this thread" or "above", check system prompt for context
            - If needed, use `mcp__slack__slack_get_thread_replies` to fetch history
            
            ### 5. Fallback
            - If Slack reply fails, save response to: `outputs/slack_response.txt`
          
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          anthropic_model: ${{ github.event.inputs.model }}
          append_system_prompt: ${{ github.event.inputs.system_prompt }}
          allowed_tools: |
            mcp__slack__slack_reply_to_thread,
            mcp__slack__slack_get_thread_replies,
            mcp__slack__slack_get_users,
            mcp__slack__slack_get_user_profile,
            mcp__notionApi__API-post-search,
            mcp__notionApi__API-post-page,
            mcp__github__get_me,
            mcp__github__get_issue,
            mcp__github__get_issue_comments,
            mcp__github__list_issues,
            mcp__github__search_issues,
            mcp__github__create_issue,
            mcp__github__add_issue_comment,
            mcp__github__update_issue,
            mcp__github__get_pull_request,
            mcp__github__list_pull_requests,
            mcp__github__get_pull_request_files,
            mcp__github__create_pull_request,
            mcp__github__merge_pull_request,
            mcp__github__update_pull_request_branch,
            mcp__github__search_repositories,
            mcp__github__get_file_contents,
            mcp__github__list_commits,
            mcp__github__search_code,
            mcp__github__create_or_update_file,
            mcp__github__push_files,
            mcp__github__create_branch,
            mcp__github__create_pending_pull_request_review,
            mcp__github__add_pull_request_review_comment,
            mcp__github__create_and_submit_pull_request_review,
            mcp__github__request_copilot_review,
            Write,Read,Bash,WebSearch
          mcp_config: |
            {
              "mcpServers": {
                "slack": {
                  "command": "npx",
                  "args": ["-y", "@modelcontextprotocol/server-slack"],
                  "env": { 
                    "SLACK_BOT_TOKEN": "${{ secrets.SLACK_BOT_TOKEN }}",
                    "SLACK_TEAM_ID": "${{ secrets.SLACK_TEAM_ID }}" 
                  }
                },
                "notionApi": {
                  "command": "npx",
                  "args": ["-y", "@notionhq/notion-mcp-server"],
                  "env": { 
                    "OPENAPI_MCP_HEADERS": "{\"Authorization\":\"Bearer ${{ secrets.NOTION_KEY }}\",\"Notion-Version\":\"2022-06-28\"}"
                  }
                },
                "github": {
                  "command": "github-mcp-server",
                  "args": ["stdio", "--toolsets", "all"],
                  "env": { 
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GH_TOKEN }}" 
                  }
                }
              }
            }
          max_turns: ${{ github.event.inputs.max_turns || '15' }}
          claude_env: ${{ steps.claude-config.outputs.claude_env }}
      
      - name: Log turn allocation
        if: always()
        run: |
          echo "=== Turn Allocation ==="
          echo "Max Turns: ${{ github.event.inputs.max_turns || '15' }}"
          echo "======================="
      
      - name: Fallback Slack update
        if: always()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          # Only run if response file exists (indicating MCP failure)
          if [ -f "outputs/slack_response.txt" ]; then
            RESPONSE=$(cat outputs/slack_response.txt)
            ESCAPED_RESPONSE=$(echo "$RESPONSE" | jq -Rs .)
            
            # Try to update the placeholder message
            UPDATE_RESULT=$(curl -s -X POST https://slack.com/api/chat.update \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{
                \"channel\": \"${{ github.event.inputs.slack_channel }}\",
                \"ts\": \"${{ github.event.inputs.slack_ts }}\",
                \"text\": $ESCAPED_RESPONSE
              }")
            
            if echo "$UPDATE_RESULT" | jq -e '.ok != true' > /dev/null 2>&1; then
              # If update fails, post as reply
              curl -X POST https://slack.com/api/chat.postMessage \
                -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                  \"channel\": \"${{ github.event.inputs.slack_channel }}\",
                  \"thread_ts\": \"${{ github.event.inputs.slack_thread_ts || github.event.inputs.slack_ts }}\",
                  \"text\": $ESCAPED_RESPONSE
                }"
            fi
          fi