name: Claude Code Processor

on:
  workflow_dispatch:
    inputs:
      question:
        description: "User question from Slack"
        required: true
        type: string
      slack_channel:
        description: "Slack channel ID"
        required: true
        type: string
      slack_ts:
        description: "Slack message timestamp"
        required: true
        type: string
      slack_thread_ts:
        description: "Slack thread timestamp"
        required: false
        type: string
      system_prompt:
        description: "Additional context (e.g., thread history)"
        required: false
        type: string
      model:
        description: "Claude model to use"
        required: false
        type: string
        default: "claude-sonnet-4-20250514"
      mcp_tools:
        description: "Comma-separated list of MCP tools"
        required: false
        type: string
      repository_context:
        description: "JSON string with repository context information"
        required: false
        type: string
      max_turns:
        description: "Maximum conversation turns (dynamically calculated)"
        required: false
        type: string
        default: "15"
      timeout_minutes:
        description: "Workflow timeout in minutes (dynamically calculated)"
        required: false
        type: string
        default: "30"
      session_id:
        description: "Session ID to resume a previous conversation"
        required: false
        type: string

jobs:
  process-request:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout_minutes || '30') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup environment
        run: |
          mkdir -p outputs
          mkdir -p outputs/checkpoints
          mkdir -p ~/.local/bin
          
          # Create session info file
          SESSION_ID="${{ github.event.inputs.session_id }}"
          if [ -z "$SESSION_ID" ] || [ "$SESSION_ID" = "null" ] || [ "$SESSION_ID" = "new-session" ]; then
            # Generate a new session ID based on run ID
            # Prefix with 'r' to distinguish from session IDs
            SESSION_ID="r${{ github.run_id }}"
            echo "Starting new session with ID: $SESSION_ID"
          else
            echo "Resuming session: $SESSION_ID"
            # Validate session ID format (should start with 's' or 'r' followed by alphanumeric)
            if ! echo "$SESSION_ID" | grep -qE '^[sr][a-zA-Z0-9]+$'; then
              echo "Warning: Session ID format may be invalid: $SESSION_ID"
            fi
          fi
          echo "$SESSION_ID" > outputs/session_id.txt
          echo "SESSION_ID=$SESSION_ID" >> $GITHUB_ENV
          
          # Log session info for debugging
          echo "SESSION_INFO: ID=$SESSION_ID, Type=${SESSION_ID:0:1}, ThreadTS=${{ github.event.inputs.slack_thread_ts }}"
      
      - name: Install GitHub MCP Server
        run: |
          echo "Downloading github-mcp-server binary..."
          curl -L https://github.com/github/github-mcp-server/releases/download/v0.5.0/github-mcp-server_Linux_x86_64.tar.gz | tar xz -C ~/.local/bin
          chmod +x ~/.local/bin/github-mcp-server
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Download previous checkpoint (if continuing)
        if: github.event.inputs.session_id != '' && github.event.inputs.session_id != 'null' && github.event.inputs.session_id != 'new-session'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: checkpoint-${{ env.SESSION_ID }}
          path: outputs/checkpoints/
      
      - name: Configure Claude settings
        id: claude-config
        run: |
          # Model-specific settings
          if [[ "${{ github.event.inputs.model }}" == "claude-3-5-sonnet-20241022" ]]; then
            THINKING="false"
          else
            THINKING="true"
          fi
          
          # Output environment variables
          cat > claude_env.txt << EOF
          ANTHROPIC_PROMPT_CACHING=1
          CLAUDE_CODE_AUTORUN_TOOLS=true
          CLAUDE_CODE_THINKING=$THINKING
          CLAUDE_CODE_DANGEROUSLY_SKIP_PERMISSIONS=true
          EOF
          
          # Set output for GitHub Actions
          echo "claude_env<<EOF" >> $GITHUB_OUTPUT
          cat claude_env.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Process with Claude
        uses: anthropics/claude-code-base-action@beta
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          prompt: |
            You are Claude, a helpful Slack bot assistant.
            
            **User Question:** ${{ github.event.inputs.question }}
            **Channel:** ${{ github.event.inputs.slack_channel }}
            **Thread:** ${{ github.event.inputs.slack_thread_ts || github.event.inputs.slack_ts }}
            **Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            ## Instructions
            
            ### CRITICAL: Tool Call Best Practices to Prevent Errors
            To avoid "tool_use ids were found without tool_result blocks" errors:
            
            1. **Track Your Tool Calls**:
               - Maintain a mental list of files you've already read
               - NEVER make duplicate calls to fetch the same file
               - If you need file content again, refer to your previous read
            
            2. **Batch Tool Calls Efficiently**:
               - When reading multiple files, make ALL read calls in a single response
               - Example: If you need README.md and package.json, call both tools at once
               - This ensures proper tool_use/tool_result pairing
            
            3. **Before Any Tool Call**:
               - Ask yourself: "Have I already fetched this content?"
               - If YES: Use the content from memory
               - If NO: Make the tool call ONCE
               - If UNSURE: Check your conversation history first
            
            4. **Tool Call Sequence Rules**:
               - Each tool_use MUST have a corresponding tool_result
               - Wait for results before making new tool calls
               - Never make the same tool call twice in one session
            
            5. **File Reading Guidelines**:
               - Read each file ONLY ONCE per session
               - Cache file contents in your context
               - Announce which files you're about to read: "I'll read files: X, Y, Z"
               - Then read them all in one tool response
            
            ### 1. Save to Notion (if available)
            - Search for "Claude Code" page using `mcp__notionApi__API-post-search`
            - If found, create a sub-page using `mcp__notionApi__API-post-page` with ALL content in the `children` array:
              ```json
              {
                "parent": { "page_id": "<CLAUDE_CODE_PAGE_ID>" },
                "properties": {
                  "title": { "title": [{ "text": { "content": "<Clean title, max 50 chars>" } }] }
                },
                "children": [
                  { "heading_1": { "rich_text": [{ "text": { "content": "<Title>" } }] } },
                  { "heading_2": { "rich_text": [{ "text": { "content": "Question" } }] } },
                  { "paragraph": { "rich_text": [{ "text": { "content": "${{ github.event.inputs.question }}" } }] } },
                  { "heading_2": { "rich_text": [{ "text": { "content": "Answer" } }] } },
                  { "paragraph": { "rich_text": [{ "text": { "content": "<Your complete response>" } }] } },
                  { "heading_2": { "rich_text": [{ "text": { "content": "Metadata" } }] } },
                  { "bulleted_list_item": { "rich_text": [{ "text": { "content": "Timestamp: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")" } }] } },
                  { "bulleted_list_item": { "rich_text": [{ "text": { "content": "Channel: ${{ github.event.inputs.slack_channel }}" } }] } },
                  { "bulleted_list_item": { "rich_text": [{ "text": { "content": "Model: ${{ github.event.inputs.model }}" } }] } }
                ]
              }
              ```
            - IMPORTANT: Include ALL content blocks in the `children` array when creating the page
            
            ### 2. Reply to Slack
            - Use `mcp__slack__slack_reply_to_thread`:
              - channel_id: "${{ github.event.inputs.slack_channel }}"
              - thread_ts: "${{ github.event.inputs.slack_thread_ts || github.event.inputs.slack_ts }}"
              - text: Your response
            
            ### 3. GitHub Repository Analysis
            - If user mentions a repository (e.g., owner/repo or github.com/owner/repo), use GitHub MCP tools
            - Check the system prompt for repository context - it will tell you if you have read-only or full access
            
            ### CRITICAL: GitHub File Update Guidelines
            To prevent 10-minute timeouts when updating GitHub files:
            
            1. **Decision Rule**: 
               - NEW file (doesn't exist yet) → `mcp__github__create_or_update_file` ✅
               - EXISTING file (already in repo) → `mcp__github__push_files` ✅
               - Multiple files → Always `mcp__github__push_files` ✅
               - When unsure → Use `mcp__github__push_files` (works for both) ✅
            
            2. **Why This Matters**:
               - GitHub API REQUIRES current file SHA for updates
               - `create_or_update_file` can't get SHA = hangs for 10 minutes
               - `push_files` handles SHA automatically using Trees API
            
            3. **Common Tasks**:
               - "Fix typo" → Use `push_files` (file exists)
               - "Update config" → Use `push_files` (file exists)
               - "Add new feature" → Check first, if new use `create_or_update_file`
               - "Batch updates" → Always use `push_files`
            
            - Natural language commands to handle:
              - "create a PR" → Use `mcp__github__create_pull_request`
              - "fix the typo" → Use `mcp__github__push_files` (NOT create_or_update_file) then create PR
              - "open an issue" → Use `mcp__github__create_issue`
              - "review PR" → Use review tools
              - "what changed" → Use `mcp__github__list_commits`
              - "analyze code" → Use `mcp__github__search_code` and `mcp__github__get_file_contents`
            - For owned repositories, you can perform write operations
            - For other repositories, provide analysis and suggestions only
            - Repository context is provided in: ${{ github.event.inputs.repository_context }}
            
            ### 4. Thread Context
            - If user mentions "this thread" or "above", check system prompt for context
            - If needed, use `mcp__slack__slack_get_thread_replies` to fetch history
            
            ### 5. Fallback
            - If Slack reply fails, save response to: `outputs/slack_response.txt`
          
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          anthropic_model: ${{ github.event.inputs.model }}
          append_system_prompt: ${{ github.event.inputs.system_prompt }}
          allowed_tools: |
            mcp__slack__slack_reply_to_thread,
            mcp__slack__slack_get_thread_replies,
            mcp__slack__slack_get_users,
            mcp__slack__slack_get_user_profile,
            mcp__notionApi__API-post-search,
            mcp__notionApi__API-post-page,
            mcp__github__get_me,
            mcp__github__get_issue,
            mcp__github__get_issue_comments,
            mcp__github__list_issues,
            mcp__github__search_issues,
            mcp__github__create_issue,
            mcp__github__add_issue_comment,
            mcp__github__update_issue,
            mcp__github__get_pull_request,
            mcp__github__list_pull_requests,
            mcp__github__get_pull_request_files,
            mcp__github__get_pull_request_comments,
            mcp__github__get_pull_request_diff,
            mcp__github__get_pull_request_reviews,
            mcp__github__get_pull_request_status,
            mcp__github__create_pull_request,
            mcp__github__merge_pull_request,
            mcp__github__update_pull_request,
            mcp__github__update_pull_request_branch,
            mcp__github__create_pending_pull_request_review,
            mcp__github__add_pull_request_review_comment_to_pending_review,
            mcp__github__submit_pending_pull_request_review,
            mcp__github__delete_pending_pull_request_review,
            mcp__github__create_and_submit_pull_request_review,
            mcp__github__request_copilot_review,
            mcp__github__assign_copilot_to_issue,
            mcp__github__search_repositories,
            mcp__github__create_repository,
            mcp__github__fork_repository,
            mcp__github__get_file_contents,
            mcp__github__create_or_update_file,
            mcp__github__delete_file,
            mcp__github__push_files,
            mcp__github__create_branch,
            mcp__github__list_branches,
            mcp__github__list_commits,
            mcp__github__get_commit,
            mcp__github__search_code,
            mcp__github__list_tags,
            mcp__github__get_tag,
            mcp__github__search_users,
            mcp__github__list_notifications,
            mcp__github__get_notification_details,
            mcp__github__mark_all_notifications_read,
            mcp__github__dismiss_notification,
            mcp__github__manage_notification_subscription,
            mcp__github__manage_repository_notification_subscription,
            mcp__github__list_code_scanning_alerts,
            mcp__github__get_code_scanning_alert,
            mcp__github__list_secret_scanning_alerts,
            mcp__github__get_secret_scanning_alert,
            Write,Read,Bash,WebSearch
          mcp_config: |
            {
              "mcpServers": {
                "slack": {
                  "command": "npx",
                  "args": ["-y", "@modelcontextprotocol/server-slack"],
                  "env": { 
                    "SLACK_BOT_TOKEN": "${{ secrets.SLACK_BOT_TOKEN }}",
                    "SLACK_TEAM_ID": "${{ secrets.SLACK_TEAM_ID }}" 
                  }
                },
                "notionApi": {
                  "command": "npx",
                  "args": ["-y", "@notionhq/notion-mcp-server"],
                  "env": { 
                    "OPENAPI_MCP_HEADERS": "{\"Authorization\":\"Bearer ${{ secrets.NOTION_KEY }}\",\"Notion-Version\":\"2022-06-28\"}"
                  }
                },
                "github": {
                  "command": "github-mcp-server",
                  "args": ["stdio", "--toolsets", "all"],
                  "env": { 
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GH_TOKEN }}" 
                  }
                }
              }
            }
          max_turns: ${{ github.event.inputs.max_turns || '15' }}
          timeout_minutes: ${{ github.event.inputs.timeout_minutes || '30' }}
          claude_env: ${{ steps.claude-config.outputs.claude_env }}
      
      - name: Extract and Append Metadata
        if: steps.claude-process.outcome == 'success'
        continue-on-error: true
        run: |
          echo "Extracting metadata from Claude execution..."
          
          # Check if execution file exists
          EXECUTION_FILE="${{ steps.claude-process.outputs.execution_file }}"
          if [ -z "$EXECUTION_FILE" ] || [ ! -f "$EXECUTION_FILE" ]; then
            echo "No execution file found, checking default location..."
            # Try default location from logs
            EXECUTION_FILE="/home/runner/work/_temp/claude-execution-output.json"
          fi
          
          if [ -f "$EXECUTION_FILE" ]; then
            echo "Found execution file at: $EXECUTION_FILE"
            
            # Extract metadata using jq (handle both regular and error_during_execution results)
            METADATA=$(jq -r 'select(.type == "result") | {
              cost: .total_cost_usd,
              duration_ms: .duration_ms,
              duration_api_ms: .duration_api_ms,
              num_turns: .num_turns,
              session_id: .session_id,
              input_tokens: ((.usage.input_tokens // 0) + (.usage.cache_read_input_tokens // 0)),
              output_tokens: (.usage.output_tokens // 0),
              cache_creation_tokens: (.usage.cache_creation_input_tokens // 0),
              is_error: (.is_error // false),
              subtype: (.subtype // "success")
            }' "$EXECUTION_FILE" | tail -1)
            
            if [ -n "$METADATA" ] && [ "$METADATA" != "null" ]; then
              # Parse individual fields
              COST=$(echo "$METADATA" | jq -r '.cost // 0' | xargs printf "%.2f")
              DURATION_MS=$(echo "$METADATA" | jq -r '.duration_ms // 0')
              API_DURATION_MS=$(echo "$METADATA" | jq -r '.duration_api_ms // 0')
              NUM_TURNS=$(echo "$METADATA" | jq -r '.num_turns // 0')
              SESSION_ID=$(echo "$METADATA" | jq -r '.session_id // "unknown"')
              INPUT_TOKENS=$(echo "$METADATA" | jq -r '.input_tokens // 0')
              OUTPUT_TOKENS=$(echo "$METADATA" | jq -r '.output_tokens // 0')
              CACHE_TOKENS=$(echo "$METADATA" | jq -r '.cache_creation_tokens // 0')
              
              # Convert durations to human-readable format
              DURATION_SEC=$((DURATION_MS / 1000))
              DURATION_MIN=$((DURATION_SEC / 60))
              DURATION_REMAINING_SEC=$((DURATION_SEC % 60))
              
              API_DURATION_SEC=$((API_DURATION_MS / 1000))
              API_DURATION_MIN=$((API_DURATION_SEC / 60))
              API_DURATION_REMAINING_SEC=$((API_DURATION_SEC % 60))
              
              # Format token numbers with commas
              format_number() {
                echo "$1" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'
              }
              
              INPUT_TOKENS_FORMATTED=$(format_number "$INPUT_TOKENS")
              OUTPUT_TOKENS_FORMATTED=$(format_number "$OUTPUT_TOKENS")
              TOTAL_TOKENS=$((${INPUT_TOKENS:-0} + ${OUTPUT_TOKENS:-0}))
              TOTAL_TOKENS_FORMATTED=$(format_number "$TOTAL_TOKENS")
              
              # Append metadata to response file
              if [ -f "outputs/slack_response.txt" ]; then
                echo "" >> outputs/slack_response.txt
                echo "---" >> outputs/slack_response.txt
                echo "📊 **Execution Details**" >> outputs/slack_response.txt
                echo "• 💰 Cost: \$$COST" >> outputs/slack_response.txt
                echo "• ⏱️ Duration: ${DURATION_MIN}m ${DURATION_REMAINING_SEC}s (API: ${API_DURATION_MIN}m ${API_DURATION_REMAINING_SEC}s)" >> outputs/slack_response.txt
                echo "• 🔄 Turns: $NUM_TURNS/${{ github.event.inputs.max_turns || '15' }}" >> outputs/slack_response.txt
                echo "• 🎯 Tokens: ${INPUT_TOKENS_FORMATTED} in / ${OUTPUT_TOKENS_FORMATTED} out (${TOTAL_TOKENS_FORMATTED} total)" >> outputs/slack_response.txt
                if [ -n "$CACHE_TOKENS" ] && [ "$CACHE_TOKENS" -gt 0 ] 2>/dev/null; then
                  CACHE_TOKENS_FORMATTED=$(format_number "$CACHE_TOKENS")
                  echo "• 💾 Cache: ${CACHE_TOKENS_FORMATTED} tokens created" >> outputs/slack_response.txt
                fi
                echo "• 🏷️ Session: \`$SESSION_ID\`" >> outputs/slack_response.txt
                echo "• 🤖 Model: ${{ github.event.inputs.model || 'claude-sonnet-4-20250514' }}" >> outputs/slack_response.txt
                
                # Add status indicator if there was an error
                IS_ERROR=$(echo "$METADATA" | jq -r '.is_error // false')
                SUBTYPE=$(echo "$METADATA" | jq -r '.subtype // "success"')
                if [ "$IS_ERROR" = "true" ] || [ "$SUBTYPE" = "error_during_execution" ]; then
                  echo "• ⚠️ Status: Completed with warnings" >> outputs/slack_response.txt
                fi
                
                echo "Metadata appended to response file"
              else
                echo "Warning: Response file not found, metadata not appended"
              fi
            else
              echo "Warning: Could not parse metadata from execution file"
            fi
          else
            echo "Warning: Execution file not found at any location"
          fi
      
      - name: Log turn allocation
        if: always()
        run: |
          echo "=== Turn Allocation ==="
          echo "Max Turns: ${{ github.event.inputs.max_turns || '15' }}"
          echo "======================="
      
      - name: Fallback Slack update
        if: always()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          # Only run if response file exists (indicating MCP failure)
          if [ -f "outputs/slack_response.txt" ]; then
            RESPONSE=$(cat outputs/slack_response.txt)
            ESCAPED_RESPONSE=$(echo "$RESPONSE" | jq -Rs .)
            
            # Try to update the placeholder message
            UPDATE_RESULT=$(curl -s -X POST https://slack.com/api/chat.update \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{
                \"channel\": \"${{ github.event.inputs.slack_channel }}\",
                \"ts\": \"${{ github.event.inputs.slack_ts }}\",
                \"text\": $ESCAPED_RESPONSE
              }")
            
            if echo "$UPDATE_RESULT" | jq -e '.ok != true' > /dev/null 2>&1; then
              # If update fails, post as reply
              curl -X POST https://slack.com/api/chat.postMessage \
                -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                  \"channel\": \"${{ github.event.inputs.slack_channel }}\",
                  \"thread_ts\": \"${{ github.event.inputs.slack_thread_ts || github.event.inputs.slack_ts }}\",
                  \"text\": $ESCAPED_RESPONSE
                }"
            fi
          fi
      
      - name: Upload checkpoint artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkpoint-${{ env.SESSION_ID }}
          path: outputs/checkpoints/
          retention-days: 7
          if-no-files-found: ignore